# How to consume a data subscription?

---

{NOTE: }

Subscription are consumed by processing batches of documents received from the server. 
A `SubscriptionWorker` object manages the documents processing and the communication between the client and the server, 
according to a set of configurations received upon it's creation. 
We've introduced several ways to create and configure a SubscriptionWorker, starting from just giving a subscription name, and ending with a detailed configuration object - `SubscriptionWorkerOptions`.

In this page:

[SubscriptionWorker lifecycle](#subscriptionworker-lifecycle)  
[Error handling](#error-handling)  
[Workers interplay](#workers-interplay)

{NOTE/}

---

{PANEL:SubscriptionWorker lifecycle}
A `SubscriptionWorker` object starts its life from being generated by the `DocumentsStore.Subscriptions`:

{CODE subscription_open_simple@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

At this point, the worker has only got its configuration. No connection or processing happens at this moment. 
In order to start processing, the `Run` method should be called. The run method receives the batch processing logic that should be performed:

{CODE subscription_run_simple@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

From this point on, the subscription worker will start processing batches. If for any reason, the processing is aborted, 
the returned task (`subscriptionRuntimeTask`) will be finished with an exception.

{PANEL/}


{PANEL:Error handling}
There are two categories of errors that may occur during subscription processing:

{INFO:Internal mechanism errors}
Those errors occur during the normal server-client communication between the worker and the server.  
If an unexpected error occurs, the worker will try to reconnect to the server. There are conditions in which the worker will cease its operation and will not try to reconnect:  

* Subscription does not exist or was deleted.  
* Other worker took over the subscription (see connection strategy).  
* The worker could not connect to any of the servers.  
* The worker could not receive the node in charge of the task(can happen when there is no leader).  
* Authorization exception.  
* Exception during connection establishment.  


{INFO/}

{INFO:User's batch processing logic unhandled exception}
Example:
{CODE throw_during_user_logic@ClientApi\DataSubscriptions\DataSubscriptions.cs /}

If exception is thrown, the worker will abort the current batch process. 
A worker can be configured to treat the thrown exception by either of the next two ways:  

* By default, the worker will wrap the thrown exception with a `SubscriberErrorException` exception and rethrow it,  
  terminating the subscription execution, without acknowledging progress or retrying. The task returned by the `Run` function will
  be terminated with an erroneous state, throwing `SubscriberErrorException` exception.
* If `SubscriptionWorkerOptions`'s value `IgnoreSubscriberErrors` is set to true, the erroneous batch wit get acknowledged without retrying and next batches will continue processing. 
{INFO/}

{INFO: Reconnecting}
In cases above, we described situations in which worker will try to reconnect with the server. There are two key `SubscriptionWorkerOptions` fields controlling this state:

*  `TimeToWaitBeforeConnectionRetry` - the time that the worker will 'sleep' before trying to reconnect.
* `MaxErroneousPeriod` - maximum time in which the worker is allowed to be in erroneous state, after that time will pass, worker will stop trying to reconnect
{INFO/}


{PANEL/}

{PANEL: Workers interplay}
There can only be one active subscription worker working on subscription. 
Nevertheless, there are scenarios where it is required to interact between an existing subscription worker and one that tries to connect. 
This relationship and interoperation configured by `SubscriptionConnectionOptions` `Strategy` field.  
Strategy field is an enum, having the next values:  

* `OpenIfFree` - the server will allow the worker to connect only if there isn't any other currently connected worker.  
  If there is an existing connection, the incoming worker will throw an SubscriptionInUseException.  
* `WaitForFree` - If the client currently cannot open the subscription because it is used by another client, it will wait for the previous client to disconnect and only then will connect.  
  This is useful in a client failover scenarios, where there is one active client, and another one already waiting to take it's place.  
* `TakeOver` - the server will allow an incoming connection to overthrow an existing one, it will behave according to the existing connection Strategy:  
  * The existing connection has strategy that is not `TakeOver`, in this case the incoming connection will take over it causing the existing connection to throw a SubscriptionInUseException exception.  
  * The existing connection has strategy that is `TakeOver`, in this case, the incoming connection will throw a SubscriptionInUseException exception.  
{PANEL/}


## Related articles

- [What are data subscriptions?](../what-are-data-subscriptions)
- [How to **create** a data subscription?](../subscription-creation/how-to-create-data-subscription)
