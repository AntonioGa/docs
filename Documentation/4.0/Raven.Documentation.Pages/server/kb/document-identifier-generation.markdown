#Document Identifier Generation

A document ID is a unique string associated with a document which allows you to differ the document from the other ones.

There are two limitations for document identifiers:

* The maximum length allowed is 2025 bytes in UTF8
* Cannot contain the `\` character

RavenDB server supports four document ID generation strategies. Their descriptions below refer purely to server side behavior. Knowledge of them is important mostly
when you save a document by using REST API. However, the RavenDB client also takes advantage of them so it's good to know how it all works under the hood.

##Autogenerated GUID

When a document ID is not specified, RavenDB will generate a globally unique identifier (`Guid`) for the stored document.
{WARNING Using non-sequential data as the document ID is not recommended. In such case you might experience a decline in performance while searching for existing documents and inserting new ones./}

##Semantic ID

The problem with GUIDs is that they are not human friendly. They are very hard to read, compare etc. The better option is to have IDs that contain useful information about the documents.
You know best what you need and how your keys should look like, so you can decide what ID the document will have before saving it. Then RavenDB will use the assigned key.
It is most often used when you save documents which already have a native ID, such as users; then you can use keys like `users/ayende`.

##Server-Side ID Generated - /

You can ask RavenDB to assign a document ID to a new document when it is saved.
There you can allow RavenDB to take care of creating your keys sequentially by adding the incremented number value at the end of the key. 
In order to use this option you need to follow the convention: the key you specify during save ends with a slash (`/`).

Providing a document ID that ends with the symbol `/` will tell RavenDB to create a server-side ID. RavenDB will create a new etag for this particular server and will add it
to the end of the ID with the server node tag  (the only guarantee you have about this value is that it's always will be unique).

Here is an example:

{CODE-BLOCK:plain}
SAVE 'users/' -> will assign 'users/0000000000000000001-A'
SAVE 'users/' -> will assign 'users/0000000000000000002-A'
{CODE-BLOCK/}

##Identity - |

Providing a document ID that ends with the pipe symbol (`|`) will change the pipe symbol to `/` and append a numeric value that in contrast to the server-side generated approach will be unique across the cluster.
The numeric part of the ID will be an always-incrementing value.

Generating identities in a distributed database requires us to do a lot more work than one might think. In order to
prevent races, such as two clients generating the same identity on two different servers, part of the process of generating a new identity requires the nodes to coordinate with one another.
That means we need to go over the network and talk to the other members in the cluster to guarantee we have the next value of the identity. That can
increase the cost of saving a new document with identity so take it in account when using this option. 

{CODE-BLOCK:plain}
SAVE 'users|' -> will assign 'users/1'
SAVE 'users|' -> will assign 'users/2'
{CODE-BLOCK/}

{NOTE:NOTE}
Because we guarantee that identities are always consecutive across the cluster,
if there's a failure scenario that prevents us from talking to a majority of the nodes we won't be able to generate the identity at all, and we'll fail to save the new document.
{NOTE /}

## Related Articles

- [Working with document identifiers](../../client-api/document-identifiers/working-with-document-identifiers)

- [HiLo algorithm](../../client-api/document-identifiers/hilo-algorithm)
